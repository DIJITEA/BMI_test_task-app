{"version":3,"sources":["logic/Blockel.js","logic/Bmiblock.js","logic/Bmiform.js","App.js","serviceWorker.js","index.js"],"names":["Blockel","blockarrel","name","male","growth","weight","bmi","Bmiblock","props","blockarr","map","empty","key","id","Bmiform","useState","setValue","setweight","valuename","setName","valuemale","setMale","setBlock","onSubmit","event","preventDefault","i","length","chr","charAt","alert","trim","Math","pow","toFixed","concat","Date","now","value","onChange","target","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAqBeA,MAnBf,YAAgC,IAAdC,EAAa,EAAbA,WAGhB,OACE,4BACG,IACD,6BACE,gCAAMA,EAAWC,MACjB,gCAAMD,EAAWE,MACjB,4BAAKF,EAAWG,QAChB,gCAAMH,EAAWI,QACjB,gCAAMJ,EAAWK,QCEVC,MAZf,SAAkBC,GACd,OACI,4BACGA,EAAMC,SAASC,KAAI,SAAAT,GAChB,GAAyB,IAArBA,EAAWU,MACf,OAAO,kBAAC,EAAD,CAASV,WAAYA,EAAYW,IAAKX,EAAWY,UCsEvDC,MA3Ef,WAAoB,IAAD,EACUC,mBAAS,KADnB,mBACVX,EADU,KACFY,EADE,OAEWD,mBAAS,KAFpB,mBAEVV,EAFU,KAEFY,EAFE,OAGYF,mBAAS,KAHrB,mBAGVG,EAHU,KAGCC,EAHD,OAIYJ,mBAAS,8CAJrB,mBAIVK,EAJU,KAICC,EAJD,OAMYN,mBAAS,CACpC,CAACJ,MAAO,KAPO,mBAMVF,EANU,KAMAa,EANA,KAyCjB,OACE,6BACE,6BACE,0BAAMC,SAlCZ,SAAuBC,GAErB,GADAA,EAAMC,iBACFP,EACF,IAAK,IAAIQ,EAAI,EAAGA,EAAIR,EAAUS,OAAQD,IAAK,CACzC,IAAIE,EAAMV,EAAUW,OAAOH,GAC3B,IAAKE,GAAO,GAAKA,EAAM,IAAc,MAARA,EAE3B,OADAE,MAAM,wJACC,EAKb,KAAI1B,EAAO2B,QAAU,KAAO3B,EAAO2B,OAAS,GAI1C,OADAD,MAAM,6EACC,EAGT,KAAIzB,EAAO0B,QAAU,KAAO1B,EAAO0B,OAAS,GAI1C,OADAD,MAAM,uEACC,EAGT,IAAIxB,GAASD,EAAU2B,KAAKC,IAAe,IAAT7B,EAAgB,IAAI8B,QAAQ,GAE9DZ,EAAUb,EAAS0B,OAAO,CAAC,CAACtB,GAAIuB,KAAKC,MAAOnC,KAAM,sBAASgB,EAAWf,KAAM,uBAAUiB,EAAWhB,OAAQ,6BAAWA,EAAQC,OAAQ,uBAAUA,EAAQC,IAAK,QAAUA,QAO/J,kDACA,2BACEgC,MAAOpB,EACPqB,SAAU,SAACf,GAAD,OAAWL,EAAQK,EAAMgB,OAAOF,UAE5C,4BAAQC,SAAU,SAACf,GAAD,OAAWH,EAAQG,EAAMgB,OAAOF,SAChD,4BAAQA,MAAM,8CAAd,8CACA,4BAAQA,MAAM,8CAAd,8CACA,4BAAQA,MAAM,yFAAd,0FAEF,wDACA,2BACEA,MAAOlC,EACPmC,SAAU,SAACf,GAAD,OAAWR,EAASQ,EAAMgB,OAAOF,UAE7C,kDACA,2BACEA,MAAOjC,EACPkC,SAAU,SAACf,GAAD,OAAWP,EAAUO,EAAMgB,OAAOF,UAE9C,4BAAQG,KAAK,UAAb,QAGJ,6BACE,kBAAC,EAAD,CAAUhC,SAAUA,O,MC3DbiC,MARf,WACE,OACE,6BACJ,kBAAC,EAAD,QCIoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4f2c19b3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Blockel({blockarrel}) {\r\n\r\n\r\n  return (\r\n    <li>\r\n      {\" \"}\r\n      <div>\r\n        <h5> {blockarrel.name}</h5>\r\n        <h5> {blockarrel.male}</h5>\r\n        <h5>{blockarrel.growth}</h5>\r\n        <h5> {blockarrel.weight}</h5>\r\n        <h5> {blockarrel.bmi}</h5>\r\n      </div>\r\n\r\n      \r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Blockel;\r\n","import React, { useState } from 'react';\r\nimport Blockel from './Blockel';\r\n\r\nfunction Bmiblock(props){\r\n    return(\r\n        <ul>\r\n          {props.blockarr.map(blockarrel => {\r\n              if (blockarrel.empty !== 1){\r\n              return <Blockel blockarrel={blockarrel} key={blockarrel.id}/>\r\n              }\r\n           }  )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Bmiblock;","import React, { useState } from \"react\";\r\nimport Bmiblock from \"./Bmiblock\";\r\n\r\nfunction Bmiform() {\r\n  const [growth, setValue] = useState(\" \");\r\n  const [weight, setweight] = useState(\" \");\r\n  const [valuename, setName] = useState(\" \");\r\n  const [valuemale, setMale] = useState(\"Мужской\");\r\n\r\n  const [blockarr, setBlock] = useState([\r\n    {empty: 1}\r\n  ]);\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n    if (valuename) {\r\n      for (var i = 0; i < valuename.length; i++) {\r\n        var chr = valuename.charAt(i);\r\n        if ((chr >= 0 || chr < 0) && chr !== \" \") {\r\n          alert(\"ФИО не может содержать цифры\");\r\n          return 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (growth.trim() <= 280 && growth.trim() > 0) {\r\n    \r\n    } else {\r\n      alert(\"Рост ошибочен\");\r\n      return 0;\r\n    }\r\n\r\n    if (weight.trim() <= 500 && weight.trim() > 0) {\r\n    \r\n    } else {\r\n      alert(\"Вес ошибочен\");\r\n      return 0;\r\n    }\r\n  \r\n    let bmi =  ((weight) / Math.pow(( growth * 0.01), 2)).toFixed(2) \r\n\r\n    setBlock( blockarr.concat([{id: Date.now(), name: \"ФИО:\" + valuename, male: \"пол: \" + valuemale, growth: \"рост: \" + growth, weight: \"вес: \" + weight, bmi: \"bmi: \" + bmi }]));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <form onSubmit={submitHandler}>\r\n          <h4>ФИО</h4>\r\n          <input\r\n            value={valuename}\r\n            onChange={(event) => setName(event.target.value)}\r\n          />\r\n          <select onChange={(event) => setMale(event.target.value)}>\r\n            <option value=\"Мужской\">Мужской</option>\r\n            <option value=\"Женский\">Женский</option>\r\n            <option value=\"Боевой вертолет\">Боевой вертолет</option>\r\n          </select>\r\n          <h4>Рост</h4>\r\n          <input\r\n            value={growth}\r\n            onChange={(event) => setValue(event.target.value)}\r\n          />\r\n          <h4>Вес</h4>\r\n          <input\r\n            value={weight}\r\n            onChange={(event) => setweight(event.target.value)}\r\n          />\r\n          <button type=\"submit\">gg</button>\r\n        </form>\r\n      </div>\r\n      <div>\r\n        <Bmiblock blockarr={blockarr} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Bmiform;\r\n","import React from 'react';\nimport Bmiform from './logic/Bmiform'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div >\n<Bmiform />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}